import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import java.util.TreeMap;

/*
							1
			2(L)						3(R)
	(L)4			5(R)			(L)null			7(R)
			(R)6			null
		
*/
public class BinaryTreeViewType {

	public static void main(String[] args) {
		TreeNode tree= new  TreeNode(1);
		tree.left= new TreeNode(2);
		tree.right= new TreeNode(3);
		
		tree.left.left= new TreeNode(4);
		tree.left.right= new TreeNode(5);
		
		tree.left.right.left= new TreeNode(6);
		tree.right.right= new TreeNode(7);
		
		
		ArrayList<TreeNode>  leftView= new ArrayList<TreeNode>();
		//leftView.add(tree);
		leftView(tree, leftView, 0);
		System.out.println("+++++++++ LEFT VIEW ++++++++");
		leftView.forEach(node ->{
			System.out.print(node.val +" ");
		});
		
		ArrayList<TreeNode>  rightView= new ArrayList<TreeNode>();
		rightView(tree, rightView, 0);
		System.out.println();
		System.out.println("+++++++++ RIGHT VIEW ++++++++");
		rightView.forEach(node ->{
			System.out.print(node.val +" ");
		});
		
		ArrayList<Integer>  topView= new ArrayList<Integer>();
		topView(tree,topView);
		System.out.println();
		System.out.println("+++++++++ TOP VIEW ++++++++");
		topView.forEach(val ->{
			System.out.print(val +" ");
		});
		
		ArrayList<Integer>  bottomView= new ArrayList<Integer>();
		bottomView(tree,bottomView);
		System.out.println();
		System.out.println("+++++++++ BOTTOM VIEW ++++++++");
		bottomView.forEach(val ->{
			System.out.print(val +" ");
		});
		
		
		//Recursion
		
		TreeNode tree1= new  TreeNode(1);
		tree1.left= new TreeNode(2);
		tree1.right= new TreeNode(3);
		
		tree1.left.left= new TreeNode(4);
		tree1.left.right= new TreeNode(5);
		
		tree1.right.left= new TreeNode(6);
		tree1.right.right= new TreeNode(7);
		System.out.println();
		System.out.println("+++++++++ TOP VIEW RECURSION ++++++++");
		Map<Integer, Pair> map= new HashMap<Integer, BinaryTreeView.Pair>();
		int hd=0; // default root
		topViewUsingRecusion(tree1,map,hd);
		for(Pair p:map.values()) {
			System.out.print(p.node.val + " ");
		}
		
		System.out.println();
		System.out.println("+++++++++ BOTTOM VIEW RECURSION ++++++++");
		Map<Integer, Pair> bmap= new HashMap<Integer, BinaryTreeView.Pair>();
		int hd1=0; // default root
		bottomViewUsingRecusion(tree1,bmap,hd1);
		for(Pair p:bmap.values()) {
			System.out.print(p.node.val + " ");
		}
	}
	
	//ByLevel TC:O(N) | SC: O(H)
	static void leftView(TreeNode node, ArrayList<TreeNode> leftView, int level) {
		//Base condition
		if(node ==null) return;
		if(level == leftView.size())
			leftView.add(node);
		leftView(node.left, leftView, level+1);
		leftView(node.right, leftView, level+1);
	}
	
	//ByLevel TC:O(N) | SC: O(H)
	static void rightView(TreeNode node, ArrayList<TreeNode> rightView, int level) {
		//Base condition
		if(node ==null) return;
		if(level == rightView.size())
			rightView.add(node);
		leftView(node.right, rightView, level+1);
		leftView(node.left, rightView, level+1);
	}
	
	static class Pair{
		int hd; // horizontal Distance
		TreeNode node;
		
		public Pair(int hd , TreeNode node) {
			this.hd=hd;
			this.node=node;
		}
	}
	
	
	static void topView(TreeNode node , ArrayList<Integer> topView) {
		Queue<Pair> q= new ArrayDeque<Pair>();
		Map<Integer,Integer> map= new TreeMap<>();
		q.add(new Pair(0,node)); // add first node in 0 position
		while(!q.isEmpty()) {
			Pair cur= q.poll();
			if(!map.containsKey(cur.hd)) {
				map.put(cur.hd, cur.node.val);
			}
			
			if(cur.node.left != null) {
				q.add(new Pair(cur.hd -1 , cur.node.left));
			}
			
			if(cur.node.right != null) {
				q.add(new Pair(cur.hd +1 , cur.node.right));
			}
		}
		map.values().forEach(val ->{
			topView.add(val);
		});
	}
	
	static void bottomView(TreeNode node , ArrayList<Integer> bottomView) {
		Queue<Pair> q= new ArrayDeque<Pair>();
		Map<Integer,Integer> map= new TreeMap<>();
		q.add(new Pair(0,node)); // add first node in 0 position
		while(!q.isEmpty()) {
			Pair cur= q.poll();
			//if(!map.containsKey(cur.hd)) {
				map.put(cur.hd, cur.node.val);
			//}
			
			if(cur.node.left != null) {
				q.add(new Pair(cur.hd -1 , cur.node.left));
			}
			
			if(cur.node.right != null) {
				q.add(new Pair(cur.hd +1 , cur.node.right));
			}
		}
		map.values().forEach(val ->{
			bottomView.add(val);
		});
	}
	
	
	static void topViewUsingRecusion(TreeNode node,Map<Integer, Pair> map, int hd) {
		if(node == null) return;
		if(!map.containsKey(hd))
			map.put(hd, new Pair(hd, node));
		topViewUsingRecusion(node.left, map, hd-1);
		topViewUsingRecusion(node.right, map, hd+1);
	}
	
	static void bottomViewUsingRecusion(TreeNode node,Map<Integer, Pair> map, int hd) {
		if(node == null) return;
		//if(!map.containsKey(hd))
			map.put(hd, new Pair(hd, node));
		topViewUsingRecusion(node.left, map, hd-1);
		topViewUsingRecusion(node.right, map, hd+1);
	}

}
