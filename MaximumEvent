public class MaximumEvent {

	 public static void main(String[] args) {
		 //[[1,2],[2,3],[3,4],[1,2]]
		// [[1,4],[4,4],[2,2],[3,4],[1,1]]
		System.out.println(maxEventsTree(new int[][] {{1,4},{4,4},{2,2},{3,4},{1,1}} ));
	}

	    static int maxEventsTree(int[][] events) {
	        
	        Arrays.sort(events,Comparator.<int[]>comparingInt(startTime->startTime[0]).thenComparingInt(endTime-> endTime[1]));
	        //[[1, 2], [1, 2], [2, 3], [3, 4]]
	        //[[1, 1], [1, 4], [2, 2], [3, 4], [4, 4]]
	        TreeSet<Integer> st=new TreeSet<>();
	        for(int i=0;i<=100000;i++)
	            st.add(i);
	        int ans=0;
	        for(int i=0;i<events.length;i++)
	        {
	        	System.out.println("Start Time ::" +events[i][0] +" End Time ::"+events[i][1]);
	            Integer tmp=st.ceiling(events[i][0]);
	            if(tmp==null)
	                continue;
	            if(tmp>=events[i][0] && tmp<=events[i][1])
	            {
	                ans++;
	                st.remove(tmp);
	            }
	        }
	        return ans;
	    }
	    
	    static int maxEventsQueue(int[][] events) {
	        
	        int n=events.length;
	        Arrays.sort(events,Comparator.<int[]>comparingInt(startTime->startTime[0]).thenComparingInt(endTime-> endTime[1]));
	        //[[1, 2], [1, 2], [2, 3], [3, 4]]
	        PriorityQueue<Integer> p=new PriorityQueue<Integer>();
	        int ans=0;
	        int i=0;
	        for(int d=1;d<=100001;d++)
	        {
	            while(i<n && events[i][0]==d)
	            {	
	            	System.out.println("Start Time : "+events[i][0] +">> End Time : "+events[i][1]);
	            	System.out.println("ADD End Time in queue "+events[i][1] );
	                p.add(events[i][1]);
	                i++;
	            }
	            while(!p.isEmpty() && p.peek()<d)
	            {
	            	System.out.println(" remove smaller "+ p.poll());
	            }
	            
	            if(!p.isEmpty())
	            {
	            	System.out.println("remove " +  p.poll());
	                ans++;
	            }
	        }
	        return ans;
	    
    }
}
